<Inicial> ::= <ListaClases>
<ListaClases> ::= <Clase> <ListaClases> | 
<Clase> ::= <ClaseConcreta> | <Interface>
<ClaseConcreta> ::= class idClase <HeredaDe> <ImplementaA> { <ListaMiembros> }
<Interface> ::= interface idClase <ExtiendeA> { <ListaEncabezados> }
<HeredaDe> ::= extends idClase | 
<ImplementaA> ::= implements <ListaTipoReferencia> | 
<ExtiendeA> ::= extends <ListaTipoReferencia> | 
<ListaTipoReferencia> ::= idClase
<ListaTipoReferencia> ::= idClase , <ListaTipoReferencia>
<ListaMiembros> ::= <Miembro> <ListaMiembros> | 
<ListaEncabezados> ::= <EncabezadoMetodo> ; <ListaEncabezados> | 
<Miembro> ::= <Atributo> | <Metodo>
<Atributo> ::= <Visibilidad> <Tipo> <ListaDecAtrs> ;
<Metodo> ::= <EncabezadoMetodo> <Bloque>
<EncabezadoMetodo> ::= <EstaticoOpt> <TipoMetodo> idMetVar <ArgsFormales>
<Visibilidad> ::= public | private
<Tipo> ::= <TipoPrimitivo> | idClase
<TipoPrimitivo> ::= boolean | char | int
<ListaDecAtrs> ::= idMetVar
<ListaDecAtrs> ::= idMetVar , <ListaDecAtrs>
<EstaticoOpt> ::= static | 
<TipoMetodo> ::= <Tipo> | void
<ArgsFormales> ::= ( <ListaArgsFormalesOpt> )
<ListaArgsFormalesOpt> ::= <ListaArgsFormales> | 
<ListaArgsFormales> ::= <ArgFormal>
<ListaArgsFormales> ::= <ArgFormal> , <ListaArgsFormales>
<ArgFormal> ::= <Tipo> idMetVar
<Bloque> ::= { <ListaSentencias> }
<ListaSentencias> ::= <Sentencia> <ListaSentencias> | 
<Sentencia> ::= ;
<Sentencia> ::= <Asignacion> ;
<Sentencia> ::= <Llamada> ;
<Sentencia> ::= <VarLocal> ;
<Sentencia> ::= <Return> ;
<Sentencia> ::= <If>
<Sentencia> ::= <While>
<Sentencia> ::= <Bloque>
<Asignacion> ::= <Acceso> <TipoDeAsignacion> <Expresion>
<TipoDeAsignacion> ::= = | += | -=
<Llamada> ::= <Acceso>
<VarLocal> ::= var idMetVar = <Expresion>
<Return> ::= return <ExpresionOpt>
<ExpresionOpt> ::= <Expresion> | 
<If> ::= if ( <Expresion> ) <Sentencia>
<If> ::= if ( <Expresion> ) <Sentencia> else <Sentencia>
<While> ::= while ( <Expresion> ) <Sentencia>
<Expresion> ::= <Expresion> <OperadorBinario> <ExpresionUnaria>
<Expresion> ::= <ExpresionUnaria>
<OperadorBinario> ::= || | && | == | != | < | > | <= | >= | + | - | * | / | %
<ExpresionUnaria> ::= <OperadorUnario> <Operando>
<ExpresionUnaria> ::= <Operando>
<OperadorUnario> ::= + | - | !
<Operando> ::= <Literal>
<Operando> ::= <Acceso>
<Literal> ::= null | true | false | intLiteral | charLiteral | stringLiteral
<Acceso> ::= <Primario> <EncadenadoOpt>
<Primario> ::= <AccesoThis>
<Primario> ::= <AccesoVar>
<Primario> ::= <AccesoConstructor>
<Primario> ::= <AccesoMetodo>
<Primario> ::= <AccesoMetodoEstatico>
<Primario> ::= <ExpresionParentizada>
<AccesoThis> ::= this
<AccesoVar> ::= idMetVar
<AccesoConstructor> ::= new idClase ( )
<ExpresionParentizada> ::= ( <Expresion> )
<AccesoMetodo> ::= idMetVar <ArgsActuales>
<AccesoMetodoEstatico> ::= idClase . idMetVar <ArgsActuales>
<ArgsActuales> ::= ( <ListaExpsOpt> )
<ListaExpsOpt> ::= <ListaExps> | 
<ListaExps> ::= <Expresion>
<ListaExps> ::= <Expresion> , <ListaExps>
<EncadenadoOpt> ::= <VarEncadenada> | <MetodoEncadenado> | 
<VarEncadenada> ::= . idMetVar <EncadenadoOpt>
<MetodoEncadenado> ::= . idMetVar <ArgsActuales> <EncadenadoOpt>


<Expresion> ::= <ExpresionUnaria> <ExpresionRec>
<ExpresionRec> ::= <OperadorBinario> <ExpresionUnaria> <ExpresionRec> | EOF

ListaTipoReferencia, ListaDecAtrs,  ListaArgsFormales, Sentencia, If, Primario, ListaExps, EncabezadoOpt

ListaTipoReferencia

<ListaTipoReferencia> ::= idClase <ListaTipoReferenciaFact>
<ListaTipoReferenciaFact> ::= , <ListaTipoReferencia> | Îµ


